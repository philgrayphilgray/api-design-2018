# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Album implements Node {
  id: ID!
  title: String!
  artist(where: ArtistWhereInput): Artist!
  art: String!
  year: String!
  rating: Int!
  owner(where: UserWhereInput): User!
  master(where: MasterWhereInput): Master
}

type Artist implements Node {
  id: ID!
  name: String!
  works(where: MasterWhereInput, orderBy: MasterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Master!]
}

type Master implements Node {
  id: ID!
  title: String!
  artist(where: ArtistWhereInput): Artist!
  art: String!
  year: String!
  rating: Int!
  copies(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album!]
}

type User implements Node {
  id: ID!
  username: String!
  collection(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album!]
}


#
# Other Types
#

type AggregateAlbum {
  count: Int!
}

type AggregateArtist {
  count: Int!
}

type AggregateMaster {
  count: Int!
}

type AggregateUser {
  count: Int!
}

"""
A connection to a list of items.
"""
type AlbumConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AlbumEdge]!
  aggregate: AggregateAlbum!
}

input AlbumCreateInput {
  title: String!
  art: String!
  year: String!
  rating: Int!
  artist: ArtistCreateOneInput!
  owner: UserCreateOneWithoutCollectionInput!
  master: MasterCreateOneWithoutCopiesInput
}

input AlbumCreateManyWithoutMasterInput {
  create: [AlbumCreateWithoutMasterInput!]
  connect: [AlbumWhereUniqueInput!]
}

input AlbumCreateManyWithoutOwnerInput {
  create: [AlbumCreateWithoutOwnerInput!]
  connect: [AlbumWhereUniqueInput!]
}

input AlbumCreateWithoutMasterInput {
  title: String!
  art: String!
  year: String!
  rating: Int!
  artist: ArtistCreateOneInput!
  owner: UserCreateOneWithoutCollectionInput!
}

input AlbumCreateWithoutOwnerInput {
  title: String!
  art: String!
  year: String!
  rating: Int!
  artist: ArtistCreateOneInput!
  master: MasterCreateOneWithoutCopiesInput
}

"""
An edge in a connection.
"""
type AlbumEdge {
  """
  The item at the end of the edge.
  """
  node: Album!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum AlbumOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  art_ASC
  art_DESC
  year_ASC
  year_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AlbumPreviousValues {
  id: ID!
  title: String!
  art: String!
  year: String!
  rating: Int!
}

type AlbumSubscriptionPayload {
  mutation: MutationType!
  node: Album
  updatedFields: [String!]
  previousValues: AlbumPreviousValues
}

input AlbumSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AlbumSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AlbumSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AlbumWhereInput
}

input AlbumUpdateInput {
  title: String
  art: String
  year: String
  rating: Int
  artist: ArtistUpdateOneInput
  owner: UserUpdateOneWithoutCollectionInput
  master: MasterUpdateOneWithoutCopiesInput
}

input AlbumUpdateManyWithoutMasterInput {
  create: [AlbumCreateWithoutMasterInput!]
  connect: [AlbumWhereUniqueInput!]
  disconnect: [AlbumWhereUniqueInput!]
  delete: [AlbumWhereUniqueInput!]
  update: [AlbumUpdateWithWhereUniqueWithoutMasterInput!]
  upsert: [AlbumUpsertWithWhereUniqueWithoutMasterInput!]
}

input AlbumUpdateManyWithoutOwnerInput {
  create: [AlbumCreateWithoutOwnerInput!]
  connect: [AlbumWhereUniqueInput!]
  disconnect: [AlbumWhereUniqueInput!]
  delete: [AlbumWhereUniqueInput!]
  update: [AlbumUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [AlbumUpsertWithWhereUniqueWithoutOwnerInput!]
}

input AlbumUpdateWithoutMasterDataInput {
  title: String
  art: String
  year: String
  rating: Int
  artist: ArtistUpdateOneInput
  owner: UserUpdateOneWithoutCollectionInput
}

input AlbumUpdateWithoutOwnerDataInput {
  title: String
  art: String
  year: String
  rating: Int
  artist: ArtistUpdateOneInput
  master: MasterUpdateOneWithoutCopiesInput
}

input AlbumUpdateWithWhereUniqueWithoutMasterInput {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateWithoutMasterDataInput!
}

input AlbumUpdateWithWhereUniqueWithoutOwnerInput {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateWithoutOwnerDataInput!
}

input AlbumUpsertWithWhereUniqueWithoutMasterInput {
  where: AlbumWhereUniqueInput!
  update: AlbumUpdateWithoutMasterDataInput!
  create: AlbumCreateWithoutMasterInput!
}

input AlbumUpsertWithWhereUniqueWithoutOwnerInput {
  where: AlbumWhereUniqueInput!
  update: AlbumUpdateWithoutOwnerDataInput!
  create: AlbumCreateWithoutOwnerInput!
}

input AlbumWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AlbumWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AlbumWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  art: String
  """
  All values that are not equal to given value.
  """
  art_not: String
  """
  All values that are contained in given list.
  """
  art_in: [String!]
  """
  All values that are not contained in given list.
  """
  art_not_in: [String!]
  """
  All values less than the given value.
  """
  art_lt: String
  """
  All values less than or equal the given value.
  """
  art_lte: String
  """
  All values greater than the given value.
  """
  art_gt: String
  """
  All values greater than or equal the given value.
  """
  art_gte: String
  """
  All values containing the given string.
  """
  art_contains: String
  """
  All values not containing the given string.
  """
  art_not_contains: String
  """
  All values starting with the given string.
  """
  art_starts_with: String
  """
  All values not starting with the given string.
  """
  art_not_starts_with: String
  """
  All values ending with the given string.
  """
  art_ends_with: String
  """
  All values not ending with the given string.
  """
  art_not_ends_with: String
  year: String
  """
  All values that are not equal to given value.
  """
  year_not: String
  """
  All values that are contained in given list.
  """
  year_in: [String!]
  """
  All values that are not contained in given list.
  """
  year_not_in: [String!]
  """
  All values less than the given value.
  """
  year_lt: String
  """
  All values less than or equal the given value.
  """
  year_lte: String
  """
  All values greater than the given value.
  """
  year_gt: String
  """
  All values greater than or equal the given value.
  """
  year_gte: String
  """
  All values containing the given string.
  """
  year_contains: String
  """
  All values not containing the given string.
  """
  year_not_contains: String
  """
  All values starting with the given string.
  """
  year_starts_with: String
  """
  All values not starting with the given string.
  """
  year_not_starts_with: String
  """
  All values ending with the given string.
  """
  year_ends_with: String
  """
  All values not ending with the given string.
  """
  year_not_ends_with: String
  rating: Int
  """
  All values that are not equal to given value.
  """
  rating_not: Int
  """
  All values that are contained in given list.
  """
  rating_in: [Int!]
  """
  All values that are not contained in given list.
  """
  rating_not_in: [Int!]
  """
  All values less than the given value.
  """
  rating_lt: Int
  """
  All values less than or equal the given value.
  """
  rating_lte: Int
  """
  All values greater than the given value.
  """
  rating_gt: Int
  """
  All values greater than or equal the given value.
  """
  rating_gte: Int
  artist: ArtistWhereInput
  owner: UserWhereInput
  master: MasterWhereInput
}

input AlbumWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type ArtistConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ArtistEdge]!
  aggregate: AggregateArtist!
}

input ArtistCreateInput {
  name: String!
  works: MasterCreateManyWithoutArtistInput
}

input ArtistCreateOneInput {
  create: ArtistCreateInput
  connect: ArtistWhereUniqueInput
}

input ArtistCreateOneWithoutWorksInput {
  create: ArtistCreateWithoutWorksInput
  connect: ArtistWhereUniqueInput
}

input ArtistCreateWithoutWorksInput {
  name: String!
}

"""
An edge in a connection.
"""
type ArtistEdge {
  """
  The item at the end of the edge.
  """
  node: Artist!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ArtistOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArtistPreviousValues {
  id: ID!
  name: String!
}

type ArtistSubscriptionPayload {
  mutation: MutationType!
  node: Artist
  updatedFields: [String!]
  previousValues: ArtistPreviousValues
}

input ArtistSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArtistSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArtistSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArtistWhereInput
}

input ArtistUpdateDataInput {
  name: String
  works: MasterUpdateManyWithoutArtistInput
}

input ArtistUpdateInput {
  name: String
  works: MasterUpdateManyWithoutArtistInput
}

input ArtistUpdateOneInput {
  create: ArtistCreateInput
  connect: ArtistWhereUniqueInput
  delete: Boolean
  update: ArtistUpdateDataInput
  upsert: ArtistUpsertNestedInput
}

input ArtistUpdateOneWithoutWorksInput {
  create: ArtistCreateWithoutWorksInput
  connect: ArtistWhereUniqueInput
  delete: Boolean
  update: ArtistUpdateWithoutWorksDataInput
  upsert: ArtistUpsertWithoutWorksInput
}

input ArtistUpdateWithoutWorksDataInput {
  name: String
}

input ArtistUpsertNestedInput {
  update: ArtistUpdateDataInput!
  create: ArtistCreateInput!
}

input ArtistUpsertWithoutWorksInput {
  update: ArtistUpdateWithoutWorksDataInput!
  create: ArtistCreateWithoutWorksInput!
}

input ArtistWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArtistWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArtistWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  works_every: MasterWhereInput
  works_some: MasterWhereInput
  works_none: MasterWhereInput
}

input ArtistWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type MasterConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [MasterEdge]!
  aggregate: AggregateMaster!
}

input MasterCreateInput {
  title: String!
  art: String!
  year: String!
  rating: Int!
  artist: ArtistCreateOneWithoutWorksInput!
  copies: AlbumCreateManyWithoutMasterInput
}

input MasterCreateManyWithoutArtistInput {
  create: [MasterCreateWithoutArtistInput!]
  connect: [MasterWhereUniqueInput!]
}

input MasterCreateOneWithoutCopiesInput {
  create: MasterCreateWithoutCopiesInput
  connect: MasterWhereUniqueInput
}

input MasterCreateWithoutArtistInput {
  title: String!
  art: String!
  year: String!
  rating: Int!
  copies: AlbumCreateManyWithoutMasterInput
}

input MasterCreateWithoutCopiesInput {
  title: String!
  art: String!
  year: String!
  rating: Int!
  artist: ArtistCreateOneWithoutWorksInput!
}

"""
An edge in a connection.
"""
type MasterEdge {
  """
  The item at the end of the edge.
  """
  node: Master!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MasterOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  art_ASC
  art_DESC
  year_ASC
  year_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MasterPreviousValues {
  id: ID!
  title: String!
  art: String!
  year: String!
  rating: Int!
}

type MasterSubscriptionPayload {
  mutation: MutationType!
  node: Master
  updatedFields: [String!]
  previousValues: MasterPreviousValues
}

input MasterSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MasterSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MasterSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MasterWhereInput
}

input MasterUpdateInput {
  title: String
  art: String
  year: String
  rating: Int
  artist: ArtistUpdateOneWithoutWorksInput
  copies: AlbumUpdateManyWithoutMasterInput
}

input MasterUpdateManyWithoutArtistInput {
  create: [MasterCreateWithoutArtistInput!]
  connect: [MasterWhereUniqueInput!]
  disconnect: [MasterWhereUniqueInput!]
  delete: [MasterWhereUniqueInput!]
  update: [MasterUpdateWithWhereUniqueWithoutArtistInput!]
  upsert: [MasterUpsertWithWhereUniqueWithoutArtistInput!]
}

input MasterUpdateOneWithoutCopiesInput {
  create: MasterCreateWithoutCopiesInput
  connect: MasterWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MasterUpdateWithoutCopiesDataInput
  upsert: MasterUpsertWithoutCopiesInput
}

input MasterUpdateWithoutArtistDataInput {
  title: String
  art: String
  year: String
  rating: Int
  copies: AlbumUpdateManyWithoutMasterInput
}

input MasterUpdateWithoutCopiesDataInput {
  title: String
  art: String
  year: String
  rating: Int
  artist: ArtistUpdateOneWithoutWorksInput
}

input MasterUpdateWithWhereUniqueWithoutArtistInput {
  where: MasterWhereUniqueInput!
  data: MasterUpdateWithoutArtistDataInput!
}

input MasterUpsertWithoutCopiesInput {
  update: MasterUpdateWithoutCopiesDataInput!
  create: MasterCreateWithoutCopiesInput!
}

input MasterUpsertWithWhereUniqueWithoutArtistInput {
  where: MasterWhereUniqueInput!
  update: MasterUpdateWithoutArtistDataInput!
  create: MasterCreateWithoutArtistInput!
}

input MasterWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MasterWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MasterWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  art: String
  """
  All values that are not equal to given value.
  """
  art_not: String
  """
  All values that are contained in given list.
  """
  art_in: [String!]
  """
  All values that are not contained in given list.
  """
  art_not_in: [String!]
  """
  All values less than the given value.
  """
  art_lt: String
  """
  All values less than or equal the given value.
  """
  art_lte: String
  """
  All values greater than the given value.
  """
  art_gt: String
  """
  All values greater than or equal the given value.
  """
  art_gte: String
  """
  All values containing the given string.
  """
  art_contains: String
  """
  All values not containing the given string.
  """
  art_not_contains: String
  """
  All values starting with the given string.
  """
  art_starts_with: String
  """
  All values not starting with the given string.
  """
  art_not_starts_with: String
  """
  All values ending with the given string.
  """
  art_ends_with: String
  """
  All values not ending with the given string.
  """
  art_not_ends_with: String
  year: String
  """
  All values that are not equal to given value.
  """
  year_not: String
  """
  All values that are contained in given list.
  """
  year_in: [String!]
  """
  All values that are not contained in given list.
  """
  year_not_in: [String!]
  """
  All values less than the given value.
  """
  year_lt: String
  """
  All values less than or equal the given value.
  """
  year_lte: String
  """
  All values greater than the given value.
  """
  year_gt: String
  """
  All values greater than or equal the given value.
  """
  year_gte: String
  """
  All values containing the given string.
  """
  year_contains: String
  """
  All values not containing the given string.
  """
  year_not_contains: String
  """
  All values starting with the given string.
  """
  year_starts_with: String
  """
  All values not starting with the given string.
  """
  year_not_starts_with: String
  """
  All values ending with the given string.
  """
  year_ends_with: String
  """
  All values not ending with the given string.
  """
  year_not_ends_with: String
  rating: Int
  """
  All values that are not equal to given value.
  """
  rating_not: Int
  """
  All values that are contained in given list.
  """
  rating_in: [Int!]
  """
  All values that are not contained in given list.
  """
  rating_not_in: [Int!]
  """
  All values less than the given value.
  """
  rating_lt: Int
  """
  All values less than or equal the given value.
  """
  rating_lte: Int
  """
  All values greater than the given value.
  """
  rating_gt: Int
  """
  All values greater than or equal the given value.
  """
  rating_gte: Int
  artist: ArtistWhereInput
  copies_every: AlbumWhereInput
  copies_some: AlbumWhereInput
  copies_none: AlbumWhereInput
}

input MasterWhereUniqueInput {
  id: ID
  title: String
}

type Mutation {
  createAlbum(data: AlbumCreateInput!): Album!
  createMaster(data: MasterCreateInput!): Master!
  createArtist(data: ArtistCreateInput!): Artist!
  createUser(data: UserCreateInput!): User!
  updateAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album
  updateMaster(data: MasterUpdateInput!, where: MasterWhereUniqueInput!): Master
  updateArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deleteMaster(where: MasterWhereUniqueInput!): Master
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteUser(where: UserWhereUniqueInput!): User
  upsertAlbum(where: AlbumWhereUniqueInput!, create: AlbumCreateInput!, update: AlbumUpdateInput!): Album!
  upsertMaster(where: MasterWhereUniqueInput!, create: MasterCreateInput!, update: MasterUpdateInput!): Master!
  upsertArtist(where: ArtistWhereUniqueInput!, create: ArtistCreateInput!, update: ArtistUpdateInput!): Artist!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyAlbums(data: AlbumUpdateInput!, where: AlbumWhereInput!): BatchPayload!
  updateManyMasters(data: MasterUpdateInput!, where: MasterWhereInput!): BatchPayload!
  updateManyArtists(data: ArtistUpdateInput!, where: ArtistWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyAlbums(where: AlbumWhereInput!): BatchPayload!
  deleteManyMasters(where: MasterWhereInput!): BatchPayload!
  deleteManyArtists(where: ArtistWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album]!
  masters(where: MasterWhereInput, orderBy: MasterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Master]!
  artists(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Artist]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  album(where: AlbumWhereUniqueInput!): Album
  master(where: MasterWhereUniqueInput!): Master
  artist(where: ArtistWhereUniqueInput!): Artist
  user(where: UserWhereUniqueInput!): User
  albumsConnection(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlbumConnection!
  mastersConnection(where: MasterWhereInput, orderBy: MasterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MasterConnection!
  artistsConnection(where: ArtistWhereInput, orderBy: ArtistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArtistConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  album(where: AlbumSubscriptionWhereInput): AlbumSubscriptionPayload
  master(where: MasterSubscriptionWhereInput): MasterSubscriptionPayload
  artist(where: ArtistSubscriptionWhereInput): ArtistSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  collection: AlbumCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutCollectionInput {
  create: UserCreateWithoutCollectionInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCollectionInput {
  username: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  collection: AlbumUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutCollectionInput {
  create: UserCreateWithoutCollectionInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutCollectionDataInput
  upsert: UserUpsertWithoutCollectionInput
}

input UserUpdateWithoutCollectionDataInput {
  username: String
}

input UserUpsertWithoutCollectionInput {
  update: UserUpdateWithoutCollectionDataInput!
  create: UserCreateWithoutCollectionInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  collection_every: AlbumWhereInput
  collection_some: AlbumWhereInput
  collection_none: AlbumWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
